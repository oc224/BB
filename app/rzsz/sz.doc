SZ(1)									 SZ(1)



NNAAMMEE
       sx, sb, sz - Send Files with ZMODEM, YMODEM, or XMODEM
       zcommand, zcommandi - Send Commands with ZMODEM

SSYYNNOOPPSSIISS
       sz [-++aabbddeeffkkLLllNNnnooppwwuuvvqqxxyyYYZZ] _f_i_l_e _._._.
       sb [-ddffkkuuvvqq] _f_i_l_e _._._.
       sx [-kkuuvvqq] _f_i_l_e
       zcommand [-oovvqq] CCOOMMMMAANNDD
       zcommandi [-oovvqq] CCOOMMMMAANNDD
       sz -T


LLIICCEENNSSEE AAGGRREEEEMMEENNTT
       This  is	 a copyrighted shareware program.  Commercial use of this pro-
       gram is subject to licensing conditions detailed	 in  the  rz.c	source
       code.   "Commercial Use" includes any use of this program to send files
       to a commercial or shareware program not published or licensed by  Omen
       Technology INC.

       Registration information is provided in the file mailer.rz.

       Use of this program constitutes agreement to the License Agreement.

       Please check http://www.omen.com for more information.

SSUUPPPPOORRTT
       Users  who have not purchased support as part of their registration may
       call 503-614-0430 to arrange for	 technical  support  on	 a  consulting
       basis.

       Technical support for registered users is available by phone and email.


DDEESSCCRRIIPPTTIIOONN
       This program uses the ZMODEM, YMODEM or XMODEM error correcting	proto-
       col  to	send one or more files over a dial-in serial port to a variety
       of programs running under PC-DOS, CP/M, Unix, VMS, and other  operating
       systems.

       To  obtain  the maximum performance and full functionality of this pro-
       gram we recommend its use with GSZ, Professional-YAM or ZCOMM.

       This program is intended to act as a server for terminal programs,  not
       to  act	as  one.  This program is not designed to be called from _c_u_(_1_)
       _t_i_p_(_1_)_, or other communications programs.  The  client  rz/sz  package,
       distributed  in	(crzsz.zip),  is  designed to be called from such pro-
       grams.

       Unix flavors of Omen Technology's Professional-YAM communications soft-
       ware  are  available  for dial-out applications.	 Unix Professional-YAM
       supports dial-out applications with  telephone  directory,  a  powerful
       script  language	 with  learn  function, high quality multiple protocol
       support, and UUCP port arbitration.

       SSzz sends one or more files with ZMODEM protocol.

       ZMODEM greatly simplifies file transfers compared to XMODEM.  In	 addi-
       tion  to	 a  friendly user interface, ZMODEM provides Personal Computer
       and other users	an  efficient,	accurate,  and	robust	file  transfer
       method.

       ZMODEM  provides complete EENNDD--TTOO--EENNDD data integrity between application
       programs.  ZMODEM's 32 bit CRC catches errors that sneak into even  the
       most advanced networks.

       Advanced	 file management features include AutoDownload (Automatic file
       Download initiated without user intervention),  Display	of  individual
       and total file lengths and transmission time estimates, Crash Recovery,
       selective file transfers, and  preservation  of	exact  file  date  and
       length.

       The  --yy	option	instructs  the	receiver  to open the file for writing
       unconditionally.	 The --aa option causes the  receiver  to	 convert  Unix
       newlines to PC-DOS carriage returns and linefeeds.


       SSbb sends one or more files with YMODEM protocol.	 When requested by the
       receiver, ssbb supports YYMMOODDEEMM--gg with "cbreak" tty	 mode,	XON/XOFF  flow
       control,	 and  interrupt	 character set to CAN (^X).  YYMMOODDEEMM--gg (Profes-
       sional-YAM gg option) increases YMODEM throughput over error free	 chan-
       nels (direct connection, X.PC, etc.)  by disabling error recovery.

       On  Unix systems, additional information about the file is transmitted.
       If the receiving program uses this information,	the  transmitted  file
       length controls the exact number of bytes written to the output dataset
       and the modify time are set accordingly.


       SSxx sends a single _f_i_l_e with XXMMOODDEEMM  or  XXMMOODDEEMM--11kk  protocol  (sometimes
       incorrectly  called  "ymodem").	 The user must supply the file name to
       both sending and receiving programs.

       Iff sszz is invoked with $SHELL set and iff that  variable	 contains  the
       string  _r_s_h or _r_k_s_h (restricted shell), sszz operates in restricted mode.
       Restricted mode restricts pathnames to the current directory and PUBDIR
       (usually /usr/spool/uucppublic) and/or subdirectories thereof.


       The  fourth form sends a single COMMAND to a ZMODEM receiver for execu-
       tion.  ZZccoommmmaanndd exits  with  the	 COMMAND  return  value.   If  COMMAND
       includes	 spaces or characters special to the shell, it must be quoted.


       The fifth form sends a single COMMAND to a ZMODEM receiver  for	execu-
       tion.   ZZccoommmmaannddii  exits as soon as the receiver has correctly received
       the command, before it is executed.


       The sixth form (sz -T) outputs all 256 code combinations to the	termi-
       nal.   The  hex	value of the character, a space, and the raw character
       are sent, 8 per line.  In you are having difficulty sending files, this
       command lets you see which character codes are being eaten by the oper-
       ating system or network.	 The terminal program must be set  to  display
       all  256	 codes	in a distinct form.  Check that each code is sent, and
       that the 8th bit on codes 0x80 to 0xFF is set.

       Sz -T then allows the caller to input characters which  are  echoed  in
       hex.   You  should  check that all control characters can be input this
       way.



       The meanings of the available options are:

       ++      Instruct the receiver to append transmitted data to an  existing
	      file (ZMODEM only).
       aa      Instruct	the  ZMODEM  receiver  to  convert text file format as
	      appropriate for the receiving system.  Valid only for ZMODEM.
       bb      (ZMODEM) Binary override: transfer file without any translation.
       cc      Instruct	the receiver to change the pathname if the destination
	      file exists.
       dd      Change all instances of "." to "/" in the transmitted  pathname.
	      Thus,  C.omenB0000  (which  is unacceptable to MSDOS or CP/M) is
	      transmitted as C/omenB0000.  If the resultant filename has  more
	      than  8  characters  in  the  stem, a "." is inserted to allow a
	      total of eleven.
       ee      Escape all control characters and the all ones character (0xFF);
	      normally only XON, XOFF, and Ctrl-X are escaped.
       ff      Send  Full  pathname.   Normally directory prefixes are stripped
	      from the transmitted filename.
       gg      Send ESC-[-?-3-4-l to start DSZ from Kermit.
       kk      (XMODEM/YMODEM) Send files using 1024 byte  blocks  rather  than
	      the  default  128	 byte  blocks.	 1024  byte packets speed file
	      transfers at high bit rates.  (ZMODEM streams the data  for  the
	      best possible throughput.)
       LLNN     Use  ZMODEM  sub-packets	of  length  N.	A larger N (32 <= N <=
	      1024) gives slightly higher throughput, a smaller N speeds error
	      recovery.	  The  default	is  128	 below 300 baud, 256 above 300
	      baud, or 1024 above 2400 baud.
       llNN     Wait for the receiver to acknowledge correct data every NN (32 <=
	      N)  characters.	This may be used to avoid network overrun when
	      XOFF flow control is lacking.
       nn      (ZMODEM) Send each file if  destination  file  does  not	exist.
	      Overwrite destination file if source file is newer than the des-
	      tination file.
       NN      (ZMODEM) Send each file if  destination  file  does  not	exist.
	      Overwrite	 destination  file  if	source file is newer or longer
	      than the destination file.
       oo      (ZMODEM) Disable automatic selection of 32 bit CRC.
       pp      (ZMODEM) Protect existing destination files by skipping transfer
	      if the destination file exists.
       rr      (ZMODEM)	Resume	interrupted file transfer.  If the source file
	      is longer than the destination file, the transfer	 commences  at
	      the offset in the source file that equals the length of the des-
	      tination file.
       rrrr     As above, but compares the files (the portion common  to	sender
	      and receiver) before resuming the transfer.
       uu      Unlink the file after successful transmission.  Users should not
	      manually abort or skip file transfers when this option is	 used.
       wwNN     Limit the transmit window size to N bytes (ZMODEM).
       qq      Quiet  suppresses	 the routine message display.  (New in Version
	      5)
       vv      Verbose causes a list of file names to be appended to /tmp/szlog
	      .	 More v's generate more output.
       xx      Count skipped files as errors.
       yy      Instruct	a  ZMODEM  receiving program to overwrite any existing
	      file with the same name.
       YY      Instruct a ZMODEM receiving program to  overwrite	 any  existing
	      file  with  the  same name, and to skip any source files that do
	      have a file with the same pathname on the destination system.
       ZZ      Use ZMODEM file compression to speed file transfer.

MMAANNUUAALL AABBOORRTT
       If the receiving program is not running,	 keyboarding  CAN  five	 times
       will  cancel  sz.   For convenience, sz also understands five ETX (Con-
       trol-C) or five ESC (ESCAPE) characters when it first attempts to  send
       a file.

DDIIAAGGNNOOSSTTIICCSS
       Exit status is as follows: 0 for successful transfers.  1 if unrecover-
       able errors are detected.  2 if syntax errors or file  access  problems
       are detected.  3 if the program was terminated by a caught interrupt.

EEXXAAMMPPLLEESS
       ZZMMOODDEEMM FFiillee TTrraannssffeerr (Unix to DSZ/ZCOMM/Professional-YAM)
       %% sszz --aa **..cc
       This  single  command transfers all .c files in the current Unix direc-
       tory with conversion (--aa) to end of line conventions appropriate to the
       receiving environment.  With ZMODEM AutoDownload enabled, Professional-
       YAM  and ZCOMM will automatically receive the files after performing  a
       security check.

       %% sszz --YYaann **..cc **..hh
       Send only the .c and .h files that exist on both systems, and are newer
       on the sending system than the corresponding version on	the  receiving
       system, converting Unix to DOS text format.

       ZZMMOODDEEMM CCoommmmaanndd DDoowwnnllooaadd (Unix to Professional-YAM)
	cpszall:all
	   zcommand "c:;cd /yam/dist"
	   sz -ya $(YD)/*.me
	   sz -yb y*.exe
	   zcommand "cd /yam"
	   zcommandi "!insms"
       This Makefile fragment uses zzccoommmmaanndd to issue commands to Professional-
       YAM to change current disk and directory.  Next, sszz transfers  the  _._m_e
       files  from the $YD directory, commanding the receiver to overwrite the
       old files and to convert from Unix end of line  conventions  to	PC-DOS
       conventions.  The third line transfers some _._e_x_e files.	The fourth and
       fifth lines command Pro-YAM to change directory and  execute  a	PC-DOS
       batch  file  _i_n_s_m_s _.  Since the batch file takes considerable time, the
       zzccoommmmaannddii form is used to allow the program to exit immediately.

       XXMMOODDEEMM FFiillee TTrraannssffeerr (Unix to Crosstalk)
       % ssxx ffoooo..cc
       EESSCC
       rrxx ffoooo..cc
       The above three commands transfer a single file from Unix to a  PC  and
       Crosstalk.  This combination is much slower and less reliable than ZMO-
       DEM.

EERRRROORR MMEESSSSAAGGEESS
       "Caught signal 99" indicates the program	 was  not  properly  compiled,
       refer to "bibi(99)" in rbsb.c for details.

SSEEEE AALLSSOO
       rz(omen),   ZCOMM   User's   Manual,  Professional-YAM  User's  Manual,
       crc(omen), sq(omen), todos(omen), tocpm(omen), tomac(omen), yam(omen)

       Compile	time  options  required	 for  various  operating  systems  are
       described in the source file.

FFIILLEESS
       32 bit CRC code courtesy Gary S. Brown.

       sz.c, crctab.c, rbsb.c, zm.c, zmr.c, zmodem.h Unix source files

       /tmp/szlog stores debugging output (sz -vv)

TTEESSTTIINNGG FFEEAATTUURREE
       The  command "sz -T file" exercises the AAttttnn sequence error recovery by
       commanding errors with unterminated  packets.   The  receiving  program
       should  complain	 five  times about binary data packets being too long.
       Each time sszz is interrupted, it should send a ZDATA header followed  by
       another	defective  packet.   If the receiver does not detect five long
       data packets, the AAttttnn sequence is not interrupting the sender, and the
       MMyyaattttnn string in sszz..cc must be modified.

       After 5 packets, sszz stops the "transfer" and prints the total number of
       characters "sent" (Tcount).  The difference  between  Tcount  and  5120
       represents  the number of characters stored in various buffers when the
       Attn sequence is generated.

SSEERRVVEERR//NNEETTWWOORRKK NNOOTTEESS
       Terminals on some timesharing systems are connected indirectly  to  the
       host  with  TTEERRMMIINNAALL SSEERRVVEERRSS operating over networks.  Terminal servers
       often interfere with file  transfers  by	 "eating"  control  characters
       and/or losing data.

       Accessing  a distant system using tteellnneett on a local Unix system entails
       the same problems.  If tteellnneett does not work well, try rrllooggiinn  with  the
       --88  option.   Set  the escape character to ^P (control P) which is pro-
       tected by ZMODEM.

       When terminal servers interfere with file  transfers,  server  commands
       are  often  available  to  help the problem.  When possible, enable the
       server and modems for hardware flow control in and out.	Set the termi-
       nal  server to telnet transparent mode.	Some typical commands are "SET
       TERMINAL DOWNLOAD", "set session passall", and "SET TERMINAL  NO	 ESC",
       but  there  is  no  standard  set of commands suitable for all terminal
       servers.	 Normally these commands  are  given  before  attempting  file
       transfers,  but	one  user  has reported that the command must be given
       _a_f_t_e_r the file transfer is started(!).  Until terminal  server  vendors
       improve the quality of their product, you may have to get on their case
       until they adequately support high performance file transfers.

       The telnet protcol used by the _t_e_l_n_e_t program and terminal servers uses
       0xFF (377 octal) for special control functions.	The 0xFF character may
       cause problems if it appears in the data stream,	 especially  uploading
       at  high speeds.	 With ZCOMM or Professional-YAM the 0xFF character can
       be protected by giving the command:
       set zmtxesc ?

       Escaping control characters with ZMODEM (sz -e) may help if the	trans-
       fer  gets  stuck	 in the same place on every attempt.  Professional-YAM
       and ZCOMM allow selection  of  which  control  characters  need	to  be
       escaped.	  In extreme cases 7-bit transmission may be required (see the
       Professional-YAM/ZCOMM manual).	If you encounter problems with control
       characters you should identify which control characters are causing the
       problem.	 Please refer to the sz -T command in sz.doc for more help.

       Flow control between the server and modem  is  often  defective.	  This
       rarely  causes a problem in interactive applications whose short bursts
       (a screenfull  at  most)	 fit  within  the  available  memory  buffers.
       Streaming protocols such as YMODEM-g, long packet SuperKermit, and ZMO-
       DEM can overload the available buffering.  Some terminal	 servers  sup-
       port commands to enable hardware flow control such as "TERM FLOWCONTROL
       HARDWARE IN OUT"; this assumes the modem	 attached  to  the  server  is
       properly configured.

       If  the	terminal  server is too brain damaged to support flow control,
       ZMODEM lets you fake it by setting a window size.  Try
	    sz -w2048 file...
       to enable software flow	control.   Experiment  with  different	window
       sizes for best results.

       Terminal servers are designed to accept keyboard input from human oper-
       ators.  They may lose data when a program sends more data to  the  host
       faster  than  humans  type.  Some servers allow larger input buffers to
       support file uploads.  If you can upload short  files  (less  than  100
       bytes) but not longer files, try
	    sz -w1024 file...
       with  your  uploading  program.	(Not all programs support this option;
       use ZCOMM or Professional-YAM.)

       When both flow control and character transparency are problems, use
	    sz -ew1024 file...
       as a starting point.

       Sometimes the terminal server software is defective and	must  be  cor-
       rected.	Please contact the network's vendor for corrective procedures.
       An alternative is to install direct serial ports for users desiring  to
       upload files.

       We  have	 also  encountered  problems when networking software fails to
       pass data after a large amount of data has been sent to the host.  This
       has  happened  on  a PPP internet connection which prevented uploads of
       large amounts of data via either FTP or a ZMODEM upload	(via  TELNET).
       The PPP connection grinds to a standstill and not even PING works.  The
       same ZMODEM/TELNET combination easily uploaded ten times as much	 to  a
       nearby machine connected by Ethernet.


PPOORRTT WWAATTCCHHEERRSS
       Some  systems  enforce a timeout which disconnects a user after several
       minutes of keyboard inactivity.	Long, error free ZMODEM	 transfers  do
       not  generate  keyboard	activity (this is why ZMODEM is so efficient).
       Restricting the window size with
	    sz -w16384 file...
       option generates terminal input at regular intervals even when no error
       correction  is  needed.	 If  problems  persist,	 try  setting a packet
       length.
	    sz -l1024 file...
       (The default ZMODEM packet length is the file length.)

NNOOTTEESS
       SSzz,, ssbb,, ssxx,, zzccoommmmaanndd and zzccoommmmaannddii are hard links to  the  compiled  sz
       program.	 These links are generated by the Makefile.

       SSzz  is  now  compiled with internal buffering to allow sending datasets
       piped to its standard input (286 version excluded).
	    ps -ef | sz -
       The file is sent as "szPID" where PID is the process ID of the  sending
       sz.   The  file	name can be specified with the OONNAAMMEE enviornment vari-
       able.

       Particular attention must be paid to flow control.  The modem and  Unix
       must  agree  on the flow control method.	 Sz does not set or reset flow
       control modes (if any).	Most Unix systems  use	XON/XOFF  ("software")
       flow control.

       Telebit modems must not be set to "spoof" UUCP, XMODEM, YMODEM, or KER-
       MIT.  Setting one of these spoofing modes interferes with other	proto-
       cols.  Telebit's YMODEM spoofing interferes with YMODEM transfers.

       If a program that does not properly implement the specified file trans-
       fer protocol causes _s_b to "hang" the  port  after  a  failed  transfer,
       either  wait  for _s_b to time out or keyboard a dozen Ctrl-X characters.
       Every reported instance of this problem has  been  corrected  by	 using
       ZCOMM,  Pro-YAM, DSZ, or other program with a correct implementation of
       the specified protocol.

       Many programs claiming to support YMODEM only support  XMODEM  with  1k
       blocks,	and  they  often don't get that quite right.  XMODEM transfers
       add up to 127 garbage bytes per file.  XMODEM-1k and  YMODEM-1k	trans-
       fers use 128 byte blocks to avoid extra padding.

       YMODEM programs use the file length transmitted at the beginning of the
       transfer to prune the file to the correct length; this may cause	 prob-
       lems  with  source  files  that grow during the course of the transfer.
       This problem does not pertain to ZMODEM transfers, which	 preserve  the
       exact file length unconditionally.

       Most  ZMODEM  options  are merely passed to the receiving program; some
       programs do not implement all of these options.

       Circular buffering and a ZMODEM sliding	window	should	be  used  when
       input  is  from	pipes instead of acknowledging frames each 1024 bytes.
       If no files can be opened, sszz sends a ZMODEM command to echo a suitable
       complaint;  perhaps  it	should	check for the presence of at least one
       accessible file before getting hot and bothered.

       Unix Professional-YAM provides higher performance  and  other  features
       not  supported  by  _s_z_.	Please contact Omen Technology Inc for product
       information.

       http://www.omen.com

       Omen Technology INC
       Post Office Box 1314
       Portland OR 97123
       503-614-0430 (Sales)


BBUUGGSS
       Some operating systtems no longer use an (unsigned) long	 to  represent
       file  length.   This has been hacked around using a cast to long in the
       sprintf statement in wctxpn().  You may wish to modify  this  statement
       to suit your local operating system.

       Some third party software packages do not properly implement the ZMODEM
       protocol.  This often causes problems when users attempt to use the  -a
       or other options.

       On  at  least  one BSD system, sz would abend it got within a few kilo-
       bytes of the end of file.
       Using the "-w8192"  option  fixed  the  problem.	  The  real  cause  is
       unknown, perhaps a bug in the kernel TTY output routines.

       The test mode leaves a zero length file on the receiving system.



				     OMEN				 SZ(1)
